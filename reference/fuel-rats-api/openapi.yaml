openapi: 3.0.0
info:
  title: Fuel Rats API
  version: '3.0'
  contact:
    name: xlexious
    email: xlexious@fuelrats.com
  termsOfService: 'https://fuelrats.com/terms-of-service'
  license:
    name: BSD 3-Clause
  description: Documentation for the Fuel Rats API v3.0
servers:
  - url: 'http://localhost:3000'
paths:
  /users:
    get:
      summary: Search Users
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: ./models/user.v1.json
                  meta:
                    $ref: ./models/searchmeta.v1.json
                  links:
                    $ref: ./models/searchlinks.v1.json
                  included:
                    type: array
                    items:
                      anyOf:
                        - $ref: ./models/rat.v1.json
                        - $ref: ./models/nickname.v1.json
                        - $ref: ./models/group.v1.json
                        - $ref: ./models/client.v1.json
              examples: {}
      parameters:
        - schema:
            type: string
          in: query
          name: filter
          description: A JSON encoded search filter query. See the page on search filters for more information
        - schema:
            type: integer
            default: '1'
            minimum: 1
          in: query
          name: 'page[number]'
          description: 'Page number to view '
        - schema:
            type: integer
            default: '100'
            maximum: 1000
            minimum: 1
          in: query
          name: 'page[size]'
          description: Number of results to display per page
        - schema:
            type: integer
            minimum: 0
            default: '0'
          in: query
          name: 'page[offset]'
          description: The number of results from the beginning of results to skip
        - schema:
            type: integer
            minimum: 1
            default: '100'
            maximum: 1000
          in: query
          name: 'page[limit]'
          description: The number of total search results to display
        - schema:
            type: string
            default: createdAt
          in: query
          name: sort
          description: 'Comma seperated list of fields to order results by, ascending by default, prefix a field with - to get descending. Example: -createdAt'
        - schema:
            type: string
          in: query
          name: include
          description: 'Sets the relationships for which related data should be included in results, by default all relationships for the object have their data included.'
      security:
        - OAuth:
            - user.read
      description: 'Searches the list of users based on parameters, only available to admins with the user.read permission'
      operationId: Users.search
    post:
      summary: Create User
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  included:
                    type: array
                    items:
                      anyOf:
                        - $ref: ./models/rat.v1.json
                        - $ref: ./models/nickname.v1.json
                        - $ref: ./models/group.v1.json
                        - $ref: ./models/client.v1.json
                  links:
                    $ref: ./models/links.v1.json
                  meta:
                    $ref: ./models/meta.v1.json
                  data:
                    $ref: ./models/user.v1.json
      description: Create a new user. This endpoint is for admin purposes. Otherwise registering users should be done manually via the fuelrats.com website.
      security:
        - OAuth:
            - user.write
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      description: The resource type
                      example: users
                    attributes:
                      type: object
                      properties:
                        suspended:
                          type:
                            - string
                            - 'null'
                          format: date-time
                          example: '2019-10-03T14:00:00+00'
                          description: Set a user as suspended until a certain timeframe
                        data:
                          type: object
                          description: Data object capable of holding arbitrary data
                        email:
                          type: string
                          format: email
                          description: "Change the user's email. Directly changing the email is only available to administrators with user.write permission, for changing a user's own email see PUT /users/:userId/password."
                        password:
                          type: string
                          description: "Change a user's password. Changing a user's password directly is only available to administrators with user.write permission. To change a user's own password see PUT /users/:userId/password"
                        status:
                          type: string
                          enum:
                            - active
                            - inactive
                            - legacy
                            - deactivated
                          description: "Set a user's account's status. Only available to administrators with user.write permission."
      operationId: Users.create
      tags:
        - Users
    parameters: []
  '/users/{userId}':
    parameters:
      - type: string
        name: userId
        in: path
        schema:
          type: string
          maxLength: 0
        required: true
    get:
      summary: View a User
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./models/user.v1.json
                  meta:
                    $ref: ./models/meta.v1.json
                  links:
                    $ref: ./models/links.v1.json
                  included:
                    type: array
                    items:
                      anyOf:
                        - $ref: ./models/rat.v1.json
                        - $ref: ./models/nickname.v1.json
                        - $ref: ./models/group.v1.json
                        - $ref: ./models/client.v1.json
      security:
        - OAuth:
            - user.read
            - user.read.me
      description: Views a specific user by id. Requires user.read permission if viewing anyone except yourself.
      operationId: User.read
    put:
      summary: Edit a User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  included:
                    type: array
                    items:
                      anyOf:
                        - $ref: ./models/rat.v1.json
                        - $ref: ./models/nickname.v1.json
                        - $ref: ./models/group.v1.json
                        - $ref: ./models/client.v1.json
                  links:
                    $ref: ./models/links.v1.json
                  meta:
                    $ref: ./models/meta.v1.json
                  data:
                    $ref: ./models/user.v1.json
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      type: string
                      description: The resource type
                      example: users
                    attributes:
                      type: object
                      properties:
                        suspended:
                          type:
                            - string
                            - 'null'
                          format: date-time
                          example: '2019-10-03T14:00:00+00'
                          description: Set a user as suspended until a certain timeframe
                        data:
                          type: object
                          description: Data object capable of holding arbitrary data
                        email:
                          type: string
                          format: email
                          description: "Change the user's email. Directly changing the email is only available to administrators with user.write permission, for changing a user's own email see PUT /users/:userId/password."
                        password:
                          type: string
                          description: "Change a user's password. Changing a user's password directly is only available to administrators with user.write permission. To change a user's own password see PUT /users/:userId/password"
                        status:
                          type: string
                          enum:
                            - active
                            - inactive
                            - legacy
                            - deactivated
                          description: "Set a user's account's status. Only available to administrators with user.write permission."
      security:
        - OAuth:
            - user.write
      description: 'Directly edits a user, only available to admins with the user.write permission.'
      operationId: User.update
      tags:
        - Users
    delete:
      summary: Delete a User
      responses:
        '204':
          description: No Content
      security:
        - OAuth:
            - user.delete
      description: 'Delete a user, only available to admins with the user.delete permission.'
      operationId: User.delete
      tags:
        - Users
  '/users/{userId}/image':
    parameters:
      - type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get the uploaded avatar for a user
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: object
                properties: {}
        '204':
          description: No Content
      description: "Returns the jpeg image of the user's avatar if available, returns 204 if the user has no uploaded avatar"
      operationId: User.image
    post:
      summary: Upload an Avatar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  included:
                    type: array
                    items:
                      anyOf:
                        - $ref: ./models/rat.v1.json
                        - $ref: ./models/nickname.v1.json
                        - $ref: ./models/group.v1.json
                        - $ref: ./models/client.v1.json
                  links:
                    $ref: ./models/links.v1.json
                  meta:
                    $ref: ./models/meta.v1.json
                  data:
                    $ref: ./models/user.v1.json
        '413':
          description: Request Entity Too Large
          content:
            application/json:
              schema:
                type: object
        '415':
          description: Unsupported Media Type
      description: 'Uploads a user avatar, requires user.write for anyone except yourself'
      security:
        - OAuth:
            - user.write
            - user.write.me
      requestBody:
        content:
          image/jpeg:
            schema:
              type: object
              properties: {}
        description: Upload image data via POST file upload
      operationId: User.setimage
      tags:
        - Users
  '/users/{userId}/certificate':
    parameters:
      - type: string
        name: userId
        in: path
        required: true
    get:
      summary: Generate and download Certificate
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/x-pem-file:
              schema:
                type: object
                properties: {}
              examples:
                example-1: {}
      operationId: User.certificate
      security:
        - OAuth:
            - user.write
            - user.write.me
      description: "Generates an SSL certificate, adds it to the user's IRC account for authentication, and serves it for download in the request body."
  '/users/{userId}/password':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    put:
      summary: Change Password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: ./models/user.v1.json
                  meta:
                    $ref: ./models/meta.v1.json
                  links:
                    $ref: ./models/links.v1.json
                  included:
                    type: array
                    items:
                      anyOf:
                        - $ref: ./models/rat.v1.json
                        - $ref: ./models/nickname.v1.json
                        - $ref: ./models/group.v1.json
                        - $ref: ./models/client.v1.json
      security:
        - OAuth:
            - user.write
            - user.write.me
      operationId: User.setpassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  default: password-changes
                  description: 'Resource type '
                  example: password-changes
                attributes:
                  type: object
                  required:
                    - password
                    - newPassword
                  properties:
                    password:
                      type: string
                      description: "The user's current password"
                    newPassword:
                      type: string
                      description: "the user's new password"
              required:
                - type
                - attributes
      tags:
        - Users
      description: "Change a user's password"
  '/users/{userId}/relationships/rats':
    parameters:
      - type: string
        name: userId
        in: path
        required: true
    get:
      summary: "Get a User's Rats"
      tags:
        - Users
        - Relationship
        - Rats
      responses: {}
      description: "Get a list of a user's rat relationships"
      operationId: User.relationshipRatsView
    post:
      summary: Add Rats to a User
      responses:
        '200':
          description: OK
      tags:
        - Users
        - Relationship
        - Rats
      description: "Add to a user's rat relationships"
      operationId: User.relationshipRatsCreate
    patch:
      summary: "Update a User's list of rats"
      responses:
        '200':
          description: OK
      tags:
        - Users
        - Relationship
        - Rats
      operationId: User.relationshipRatsPatch
      description: "Update (overwrite) a user's rat relationships"
    delete:
      summary: Remove rats from a User
      responses:
        '200':
          description: OK
      tags:
        - Users
        - Relationship
        - Rats
      description: "Delete from a user's list of rat relationships"
      operationId: User.relationshipRatsDelete
  '/users/{userId|/relationships/displayRat':
    get:
      summary: "Get a User's display rat"
      tags:
        - Users
        - Relationship
        - Rats
      responses: {}
    patch:
      summary: "Update a User's display rat"
      responses:
        '200':
          description: OK
      tags:
        - Users
        - Relationship
        - Rats
  '/users/{userId}/relationships/groups':
    parameters:
      - type: string
        name: userId
        in: path
        required: true
    get:
      summary: "Get a User's user groups"
      tags:
        - Users
        - Relationship
        - Groups
      responses: {}
    post:
      summary: "Add to a User's user groups"
      responses:
        '200':
          description: OK
      tags:
        - Users
        - Relationship
        - Groups
    patch:
      summary: "Update a User's user groups"
      responses:
        '200':
          description: OK
      tags:
        - Users
        - Relationship
        - Groups
    delete:
      summary: "Delete from a User's user groups"
      responses:
        '200':
          description: OK
      tags:
        - Users
        - Relationship
        - Groups
  '/users/{userId}/relationships/clients':
    parameters:
      - type: string
        name: userId
        in: path
        required: true
    get:
      summary: "Get a User's list of OAuth clients"
      tags:
        - Users
        - Relationship
        - Clients
      responses: {}
    post:
      summary: "Add to a User's list of OAuth clients"
      responses:
        '200':
          description: OK
      tags:
        - Users
        - Relationship
        - Clients
    patch:
      summary: "Update a User's list of OAuth clients"
      responses:
        '200':
          description: OK
      tags:
        - Users
        - Relationship
        - Clients
    delete:
      summary: "Delete from a User's list of OAuth clients"
      responses:
        '200':
          description: OK
      tags:
        - Users
        - Relationship
        - Clients
  /nicknames:
    get:
      summary: Search Nicknames
      tags: []
      responses: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                included:
                  type: array
                  items:
                    anyOf:
                      - $ref: ./models/rat.v1.json
                      - $ref: ./models/user.v1.json
                links:
                  $ref: ./models/searchlinks.v1.json
                meta:
                  $ref: ./models/searchmeta.v1.json
                data:
                  type: array
                  items:
                    $ref: ./models/nickname.v1.json
      description: ''
      security:
        - OAuth: []
    post:
      summary: Create Nickname
      responses:
        '200':
          description: OK
  '/nicknames/{nick}':
    parameters:
      - type: string
        name: nick
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
    post:
      summary: ''
      responses:
        '200':
          description: OK
    delete:
      summary: ''
      responses:
        '200':
          description: OK
components:
  schemas: {}
  securitySchemes:
    OAuth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://fuelrats.com/authorize'
          refreshUrl: ''
          scopes: []
        password:
          tokenUrl: 'https://api.fuelrats.com/oauth2/token'
          refreshUrl: ''
          scopes: []
        authorizationCode:
          tokenUrl: 'https://api.fuelrats.com/oauth2/token'
          refreshUrl: ''
          scopes: []
          authorizationUrl: 'https://fuelrats.com/authorize'
